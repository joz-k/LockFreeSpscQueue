# The name of the workflow, displayed in the "Actions" tab.
name: C++ CI (Multi-Platform)

# Triggers for the workflow (unchanged).
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    # Use a build matrix to run the job on all three major platforms.
    # macos-14 is the latest Apple Silicon (ARM) runner.
    strategy:
      matrix:
        os: [ubuntu-latest, macos-14, windows-latest]

    # Run on the OS specified by the current matrix configuration.
    runs-on: ${{ matrix.os }}

    steps:
      # Step 1: Check out repository code.
      - name: Check out repository
        uses: actions/checkout@v4
        
      # Step 2: Install and set up latest LLVM/Clang on macOS using Homebrew.
      # This approach is far more robust than relying on third-party actions.
      - name: Install latest Clang on macOS via Homebrew
        if: matrix.os == 'macos-14'
        run: |
          # Use the platform's native package manager to install the latest llvm toolchain.
          brew install llvm
          # Set the CC and CXX environment variables for subsequent steps.
          # This tells CMake exactly which compiler to use, overriding the system default.
          # We write to GITHUB_ENV so these variables are available to all following steps.
          echo "CC=$(brew --prefix llvm)/bin/clang" >> $GITHUB_ENV
          echo "CXX=$(brew --prefix llvm)/bin/clang++" >> $GITHUB_ENV

      # Step 3: Configure the project using CMake.
      # On macOS, CMake will now use the Clang we installed via Homebrew because
      # the CC and CXX environment variables are set.
      - name: Configure CMake
        run: >
          cmake -S . -B build
          -DCMAKE_BUILD_TYPE=Debug
          -DSPSC_QUEUE_BUILD_TESTS=ON
          -DSPSC_QUEUE_BUILD_EXAMPLES=OFF
          -DSPSC_QUEUE_BUILD_BENCHMARKS=OFF

      # Step 4: Build the project.
      - name: Build Project
        run: cmake --build build --config Debug

      # Step 5: Run the tests.
      - name: Run Tests
        run: |
          cd build
          ctest -C Debug --verbose


